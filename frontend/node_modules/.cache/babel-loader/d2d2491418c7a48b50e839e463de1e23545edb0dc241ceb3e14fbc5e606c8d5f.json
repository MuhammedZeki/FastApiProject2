{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  style: {\n    \"color\": \"red\"\n  }\n};\nconst _hoisted_2 = {\n  key: 1,\n  style: {\n    \"color\": \"green\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[6] || (_cache[6] = _createElementVNode(\"h2\", null, \"Students\", -1)), _createElementVNode(\"form\", {\n    onSubmit: _cache[2] || (_cache[2] = _withModifiers((...args) => $options.addStudent && $options.addStudent(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"label\", {\n    for: \"name\"\n  }, \"Name:\", -1)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newStudent.name = $event),\n    id: \"name\",\n    required: \"\"\n  }, null, 512), [[_vModelText, $data.newStudent.name]])]), _createElementVNode(\"div\", null, [_cache[4] || (_cache[4] = _createElementVNode(\"label\", {\n    for: \"email\"\n  }, \"Email:\", -1)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.newStudent.email = $event),\n    id: \"email\",\n    type: \"email\",\n    required: \"\"\n  }, null, 512), [[_vModelText, $data.newStudent.email]])]), _cache[5] || (_cache[5] = _createElementVNode(\"button\", {\n    type: \"submit\"\n  }, \"Add Student\", -1))], 32), $data.error ? (_openBlock(), _createElementBlock(\"p\", _hoisted_1, _toDisplayString($data.error), 1)) : _createCommentVNode(\"\", true), $data.success ? (_openBlock(), _createElementBlock(\"p\", _hoisted_2, _toDisplayString($data.success), 1)) : _createCommentVNode(\"\", true), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.students, student => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: student.id\n    }, _toDisplayString(student.name) + \" - \" + _toDisplayString(student.email), 1);\n  }), 128))])]);\n}","map":{"version":3,"names":["key","style","_createElementBlock","_createElementVNode","onSubmit","_cache","_withModifiers","args","$options","addStudent","for","$event","$data","newStudent","name","id","required","email","type","error","_hoisted_1","_toDisplayString","_createCommentVNode","success","_hoisted_2","_Fragment","_renderList","students","student"],"sources":["/home/ubuntu/FastApiProject2/frontend/src/views/StudentsPage.vue"],"sourcesContent":["<!-- src/views/Students.vue -->\n<template>\n  <div>\n    <h2>Students</h2>\n    <form @submit.prevent=\"addStudent\">\n      <div>\n        <label for=\"name\">Name:</label>\n        <input v-model=\"newStudent.name\" id=\"name\" required />\n      </div>\n      <div>\n        <label for=\"email\">Email:</label>\n        <input v-model=\"newStudent.email\" id=\"email\" type=\"email\" required />\n      </div>\n      <button type=\"submit\">Add Student</button>\n    </form>\n    <p v-if=\"error\" style=\"color:red\">{{ error }}</p>\n    <p v-if=\"success\" style=\"color:green\">{{ success }}</p>\n\n    <ul>\n      <li v-for=\"student in students\" :key=\"student.id\">\n        {{ student.name }} - {{ student.email }}\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport api from '../services/api'\n\nexport default {\n  data() {\n    return {\n      students: [],\n      newStudent: {\n        name: '',\n        email: ''\n      },\n      error: '',\n      success: ''\n    }\n  },\n  created() {\n    this.fetchStudents()\n  },\n  methods: {\n    async fetchStudents() {\n      try {\n        const response = await api.get('/students/')\n        this.students = response.data\n      } catch (err) {\n        console.error('Error fetching students:', err)\n      }\n    },\n    async addStudent() {\n      try {\n        const response = await api.post('/students/', this.newStudent)\n        this.students.push(response.data)\n        this.success = 'Student added successfully.'\n        this.error = ''\n        this.newStudent = { name: '', email: '' }\n      } catch (err) {\n        this.error = err.response?.data?.detail || 'Failed to add student.'\n        this.success = ''\n      }\n    }\n  }\n}\n</script>\n"],"mappings":";;EAAAA,GAAA;EAeoBC,KAAiB,EAAjB;IAAA;EAAA;;;EAfpBD,GAAA;EAgBsBC,KAAmB,EAAnB;IAAA;EAAA;;;uBAdpBC,mBAAA,CAqBM,c,0BApBJC,mBAAA,CAAiB,YAAb,UAAQ,QACZA,mBAAA,CAUO;IAVAC,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAJjBC,cAAA,KAAAC,IAAA,KAI2BC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;MAC/BJ,mBAAA,CAGM,c,0BAFJA,mBAAA,CAA+B;IAAxBO,GAAG,EAAC;EAAM,GAAC,OAAK,Q,gBACvBP,mBAAA,CAAsD;IAP9D,uBAAAE,MAAA,QAAAA,MAAA,MAAAM,MAAA,IAOwBC,KAAA,CAAAC,UAAU,CAACC,IAAI,GAAAH,MAAA;IAAEI,EAAE,EAAC,MAAM;IAACC,QAAQ,EAAR;gCAA3BJ,KAAA,CAAAC,UAAU,CAACC,IAAI,E,KAEjCX,mBAAA,CAGM,c,0BAFJA,mBAAA,CAAiC;IAA1BO,GAAG,EAAC;EAAO,GAAC,QAAM,Q,gBACzBP,mBAAA,CAAqE;IAX7E,uBAAAE,MAAA,QAAAA,MAAA,MAAAM,MAAA,IAWwBC,KAAA,CAAAC,UAAU,CAACI,KAAK,GAAAN,MAAA;IAAEI,EAAE,EAAC,OAAO;IAACG,IAAI,EAAC,OAAO;IAACF,QAAQ,EAAR;gCAA1CJ,KAAA,CAAAC,UAAU,CAACI,KAAK,E,+BAElCd,mBAAA,CAA0C;IAAlCe,IAAI,EAAC;EAAQ,GAAC,aAAW,O,OAE1BN,KAAA,CAAAO,KAAK,I,cAAdjB,mBAAA,CAAiD,KAAjDkB,UAAiD,EAAAC,gBAAA,CAAZT,KAAA,CAAAO,KAAK,SAf9CG,mBAAA,YAgBaV,KAAA,CAAAW,OAAO,I,cAAhBrB,mBAAA,CAAuD,KAAvDsB,UAAuD,EAAAH,gBAAA,CAAdT,KAAA,CAAAW,OAAO,SAhBpDD,mBAAA,YAkBInB,mBAAA,CAIK,c,kBAHHD,mBAAA,CAEKuB,SAAA,QArBXC,WAAA,CAmB4Bd,KAAA,CAAAe,QAAQ,EAAnBC,OAAO;yBAAlB1B,mBAAA,CAEK;MAF4BF,GAAG,EAAE4B,OAAO,CAACb;wBACzCa,OAAO,CAACd,IAAI,IAAG,KAAG,GAAAO,gBAAA,CAAGO,OAAO,CAACX,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}