{"ast":null,"code":"import { required, email } from '@vuelidate/validators';\nimport useVuelidate from '@vuelidate/core';\nimport api from '../services/api';\nexport default {\n  data() {\n    return {\n      user: {\n        username: '',\n        email: '',\n        password: ''\n      },\n      error: '',\n      success: ''\n    };\n  },\n  validations() {\n    return {\n      user: {\n        username: {\n          required\n        },\n        email: {\n          required,\n          email\n        },\n        password: {\n          required\n        }\n      }\n    };\n  },\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  methods: {\n    async handleRegister() {\n      this.v$.$touch();\n      if (this.v$.$invalid) {\n        this.error = 'Please fill out the form correctly.';\n        this.success = '';\n        return;\n      }\n      try {\n        const response = await api.post('/users/', this.user);\n        this.success = 'Registration successful. You can now login.';\n        this.error = '';\n        this.user = {\n          username: '',\n          email: '',\n          password: ''\n        };\n      } catch (err) {\n        this.error = err.response?.data?.detail || 'Registration failed.';\n        this.success = '';\n      }\n    }\n  }\n};","map":{"version":3,"names":["required","email","useVuelidate","api","data","user","username","password","error","success","validations","setup","v$","methods","handleRegister","$touch","$invalid","response","post","err","detail"],"sources":["/home/ubuntu/FastApiProject2/frontend/src/views/Register.vue"],"sourcesContent":["<!-- src/views/Register.vue -->\n<template>\n    <div>\n      <h2>Register</h2>\n      <form @submit.prevent=\"handleRegister\">\n        <div>\n          <label for=\"username\">Username:</label>\n          <input v-model=\"user.username\" id=\"username\" required />\n          <span v-if=\"$v.user.username.$error\">Username is required.</span>\n        </div>\n        <div>\n          <label for=\"email\">Email:</label>\n          <input v-model=\"user.email\" id=\"email\" type=\"email\" required />\n          <span v-if=\"$v.user.email.$error\">Valid email is required.</span>\n        </div>\n        <div>\n          <label for=\"password\">Password:</label>\n          <input v-model=\"user.password\" id=\"password\" type=\"password\" required />\n          <span v-if=\"$v.user.password.$error\">Password is required.</span>\n        </div>\n        <button type=\"submit\">Register</button>\n      </form>\n      <p v-if=\"error\" style=\"color:red\">{{ error }}</p>\n      <p v-if=\"success\" style=\"color:green\">{{ success }}</p>\n    </div>\n  </template>\n  \n  <script>\n  import { required, email } from '@vuelidate/validators'\n  import useVuelidate from '@vuelidate/core'\n  import api from '../services/api'\n  \n  export default {\n    data() {\n      return {\n        user: {\n          username: '',\n          email: '',\n          password: ''\n        },\n        error: '',\n        success: ''\n      }\n    },\n    validations() {\n      return {\n        user: {\n          username: { required },\n          email: { required, email },\n          password: { required }\n        }\n      }\n    },\n    setup() {\n      return { v$: useVuelidate() }\n    },\n    methods: {\n      async handleRegister() {\n        this.v$.$touch()\n        if (this.v$.$invalid) {\n          this.error = 'Please fill out the form correctly.'\n          this.success = ''\n          return\n        }\n        try {\n          const response = await api.post('/users/', this.user)\n          this.success = 'Registration successful. You can now login.'\n          this.error = ''\n          this.user = { username: '', email: '', password: '' }\n        } catch (err) {\n          this.error = err.response?.data?.detail || 'Registration failed.'\n          this.success = ''\n        }\n      }\n    }\n  }\n  </script>\n  \n  <style scoped>\n  span {\n    color: red;\n    font-size: 0.8em;\n  }\n  </style>\n  "],"mappings":"AA4BE,SAASA,QAAQ,EAAEC,KAAI,QAAS,uBAAsB;AACtD,OAAOC,YAAW,MAAO,iBAAgB;AACzC,OAAOC,GAAE,MAAO,iBAAgB;AAEhC,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE;QACJC,QAAQ,EAAE,EAAE;QACZL,KAAK,EAAE,EAAE;QACTM,QAAQ,EAAE;MACZ,CAAC;MACDC,KAAK,EAAE,EAAE;MACTC,OAAO,EAAE;IACX;EACF,CAAC;EACDC,WAAWA,CAAA,EAAG;IACZ,OAAO;MACLL,IAAI,EAAE;QACJC,QAAQ,EAAE;UAAEN;QAAS,CAAC;QACtBC,KAAK,EAAE;UAAED,QAAQ;UAAEC;QAAM,CAAC;QAC1BM,QAAQ,EAAE;UAAEP;QAAS;MACvB;IACF;EACF,CAAC;EACDW,KAAKA,CAAA,EAAG;IACN,OAAO;MAAEC,EAAE,EAAEV,YAAY,CAAC;IAAE;EAC9B,CAAC;EACDW,OAAO,EAAE;IACP,MAAMC,cAAcA,CAAA,EAAG;MACrB,IAAI,CAACF,EAAE,CAACG,MAAM,CAAC;MACf,IAAI,IAAI,CAACH,EAAE,CAACI,QAAQ,EAAE;QACpB,IAAI,CAACR,KAAI,GAAI,qCAAoC;QACjD,IAAI,CAACC,OAAM,GAAI,EAAC;QAChB;MACF;MACA,IAAI;QACF,MAAMQ,QAAO,GAAI,MAAMd,GAAG,CAACe,IAAI,CAAC,SAAS,EAAE,IAAI,CAACb,IAAI;QACpD,IAAI,CAACI,OAAM,GAAI,6CAA4C;QAC3D,IAAI,CAACD,KAAI,GAAI,EAAC;QACd,IAAI,CAACH,IAAG,GAAI;UAAEC,QAAQ,EAAE,EAAE;UAAEL,KAAK,EAAE,EAAE;UAAEM,QAAQ,EAAE;QAAG;MACtD,EAAE,OAAOY,GAAG,EAAE;QACZ,IAAI,CAACX,KAAI,GAAIW,GAAG,CAACF,QAAQ,EAAEb,IAAI,EAAEgB,MAAK,IAAK,sBAAqB;QAChE,IAAI,CAACX,OAAM,GAAI,EAAC;MAClB;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}